{"name":"Light BLE","tagline":"An enhanced android app to communicate with Bluetooth LE peripheral.","body":"Light_BLE\r\n=========\r\n\r\nAn enhanced android app to communicate with Bluetooth LE peripheral.\r\n\r\nThis app maybe useful in Bluetooth Low Energy peripheral equipment \r\ndevelopment. It is based on an example in Android's SDK source code \r\nsmaple which located in sdk/samples/android-19/connectivity/BluetoothLeGatt/\r\n, but that exmaple is so sucks(yeah, Light BLE is still sucks, but \r\nmuch better than that sample).\r\n\r\nFollowing is what I emproved based on that sample.\r\n\r\n1. Change the LocalService and Activity communication \r\nmechanism from broadcast intent into callback hooks.\r\n2. Add RSSI signal detect.\r\n3. Add write characteristic dialog(still need improve).\r\n\r\nWhy I make above emprovment?\r\n\r\n1. Broadcast Intents was not dependable, I guess that's\r\nthe reason that I missed a lot of messages. So I studied \r\nthe communicaiton between Service and Acitivity, and \r\ndecided to use callback hooks to send feedback or messages\r\nto the forground Activity.\r\n\r\n2. Since, I wanna develop an Loss-Resistant device, the most \r\nsilly implementation is to detect the RSSI signal strength, \r\nand write a characteristic value back to BLE devices back to\r\ninform whether it is losed or not. So I add an RSSI signal \r\ndetection function into that APP.\r\n\r\n3. Some time, we just need to write an characteristic value \r\ninto the BLE database to operating the peripheral device.\r\nThat's an practical function in BLE device development. There\r\nare an ios APP named LightBlue, I refered its function to \r\nadd above functions. Actually, that's another reason why I develop\r\nthis app, I can't found any available APP in android platform. ","google":"UA-20256105-3","note":"Don't delete this file! It's used internally to help with page regeneration."}